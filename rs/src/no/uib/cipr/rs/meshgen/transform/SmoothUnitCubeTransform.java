package no.uib.cipr.rs.meshgen.transform;

import no.uib.cipr.rs.geometry.Point3D;
import no.uib.cipr.rs.meshgen.structured.CartesianTopology;
import no.uib.cipr.rs.util.Configuration;

/**
 * Smooth mesh generated by the transform described in 'The Mimetic Finite
 * Difference Discretization of Diffusion Promblem on Unstructured Polyhedral
 * Meshes', Lipnikov K., Shashkov M. and D. Svyatskiy.
 * 
 * The input points are assumed to lie within the unit cube in 3D.
 */
public class SmoothUnitCubeTransform extends Transform {

    private double scale;

    private Point3D[] points;

    /**
     * Creates a smooth unit cube transform.
     * 
     * @param config
     *            Smooth unit cube scale
     * @param topology
     *            Not used
     * @param points
     *            Not used
     */
    public SmoothUnitCubeTransform(Configuration config,
            CartesianTopology topology, Point3D[] points) {
        if (topology.getDimension() == 1)
            throw new IllegalArgumentException(config.trace()
                    + "SmoothUnitCubeTransform is only valid for 3D mesh.");

        scale = config.getDouble("scale");

        this.points = points;
    }

    @Override
    public Point3D getPoint(int i) {
        Point3D p = points[i];

        double pert = scale * Math.sin(2 * Math.PI * p.x())
                * Math.sin(2 * Math.PI * p.y()) * Math.sin(2 * Math.PI * p.z());
        return new Point3D(p.x() + pert, p.y() + pert, p.z() + pert);
    }
}
