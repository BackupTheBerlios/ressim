% [edges] = read_edge_section (fid)
%
% Read the edge section from an already open file. This routine is internal and
% should not be used directly.
function [edges] = read_edge_section (fid)
   % parse the header row, reading two integers, the first one being the
   % count of lines, the second one being whether there are any boundary
   % markers (which there should be if the file was generated by the 
   % program).
   num_of_edges = fscanf (fid, '%d', 1);
   num_of_dims = 2;  % always 2 when dimension-reduced from 2D
   num_of_attrs = 0; % attributes not supported in the poly file
   boundary = fscanf (fid, '%d', 1);
   
   % each line will have the index number, then the dimension number of
   % indices and finally the attributes and the boundary marker
   entries_per_line = 1 + num_of_dims + num_of_attrs + boundary;
   
   % index of the boundary marker. this is the number of columns before it
   % that should be dropped, plus one since the array is one-based
   marker = 1 + num_of_dims + num_of_attrs + 1;
   
   % start out with an empty set. the extra dimension is the boundary marker
   edges = -ones (num_of_edges, num_of_dims + 1);
   
   % read each line of the file into the vertices array. note that each
   % line is transposed before being added to the end of vertices array
   for i = 1:num_of_edges
      entry = fscanf (fid, '%f', entries_per_line)';

      % first entry of the row is the index number
      index = entry(1);
      
      % keep track of which lines that are considered to be boundaries and which
      % that are genuine constraints. the original boundary may be split when
      % inserting extra points.
      if boundary
         is_border = entry(marker);
      else
         is_border = 0;
      end;
      
      % the number 2 in the line below appears because the indices start
      % at the second element. it is not necessary to put the edges at
      % their proper indices, because we don't have any other files that
      % refer back to them (triangles only refer to points)
      edges(index,:) = [entry(2:2+num_of_dims-1), is_border];
   end;